---
  - name: getfacts
    os_server_facts:
      cloud: devstack
      auth: 
        project_name: student-{{ sid }}
      server: "*{{ sid }}*"
    register: new_vm

  - set_fact: new_vm_uuid0="{{ new_vm.ansible_facts.openstack_servers[0].id }}"
  - set_fact: new_vm_uuid1="{{ new_vm.ansible_facts.openstack_servers[1].id }}"
  - set_fact: new_vm_uuid2="{{ new_vm.ansible_facts.openstack_servers[2].id }}"
  - set_fact: new_vm_uuid3="{{ new_vm.ansible_facts.openstack_servers[3].id }}"

  
  - name: Set the Provider URL
    set_fact:
      provider_url: "https://192.168.1.101/api/providers/20000000000005"

  - name: Refresh provider in CloudForms
    uri:
      url: "{{ provider_url }}"
      method: POST
      body:
        action: refresh
      body_format: json
      user: admin
      password: "{{ cf_password }}"
      validate_certs: False
      headers:
        Content-Type: "application/json"
      status_code: 200
    register: output
#  - debug: var=output
  - name: set the task href
    set_fact:
      task_url: "{{ output.json.task_href}}"
#  - debug: var=task_url

  - name: Wait for the refresh to end
    uri:
      url: "{{ task_url }}"
      method: GET
      validate_certs: False
      user: admin
      password: "{{ cf_password }}"
      headers:
        Content-Type: "application/json"
      status_code: 200
    register: task_result
    until: task_result.json.state == 'Finished' or task_result.json.status == 'Error'
    failed_when: task_result.json.status == 'Error'
    retries: 5
    delay: 20
  - debug: var=task_result

  - name: Get student-"{{ sid }}" tenant id & href
    uri:
      url: "https://192.168.1.101/api/tenants?filter[]=name=student-{{ sid }}&expand=resources"
      method: GET
      return_content: yes
      user: admin
      password: "{{ cf_password }}"
      validate_certs: no
      body_format: json
      headers:
        Content-Type: "application/json"
    register: tenant

  - name: Create student-"{{ sid }}" group & map to tenant
    uri:
      url: "https://192.168.1.101/api/groups"
      method: POST
      return_content: yes
      user: admin
      password: "{{ cf_password }}"
      validate_certs: no
      body_format: json
      headers:
        Content-Type: "application/json"
      body:
        action: create
        description: "Student-{{ sid }}-group"
        role:
          id: 20000000000021
        tenant:
          href: "{{ tenant.json.resources[0].href }}"
        filters:
          managed: [ "/prov_scope/all" ]
    register: group

  - name: Create student-"{{ sid }}" user
    uri:
      url: "https://192.168.1.101/api/users"
      method: POST
      return_content: yes
      user: admin
      password: "{{ cf_password }}"
      validate_certs: no
      body_format: json
      headers:
        Content-Type: "application/json"
      body:
        action: create
        userid: student{{ sid }}
        password: redhat
        name: Student{{ sid }}
        group:
          id: "{{ group.json.results[0].id }}"
    register: user
                     

  - name: Get services
    uri:
      url: "https://192.168.1.101/api/services?offset=0&limit=500%20&sort_order=asc&sort_by=id"
      method: GET
      return_content: yes
      user: admin
      password: "{{ cf_password }}"
      validate_certs: no
      body_format: json
      headers:
        Content-Type: "application/json"
    register: service


  - name: set svc_url fact
    set_fact:
      svc_url: "{{ service.json.resources|last|json_query('href') }}"

  - name: Set new user as owner of service
    uri:
      url: "{{ svc_url }}"
      method: POST
      return_content: yes
      user: admin
      password: "{{ cf_password }}"
      validate_certs: no
      body_format: json
      headers:
        Content-Type: "application/json"
      body:
        action: set_ownership
        resource:
          owner:
            userid: student{{ sid }}
          group:
            description: "Student-{{ sid }}-group"


  - set_fact: find_vm_url0="http://192.168.1.101/api/vms?expand=resources&attributes=href,name,uid_ems&filter[]=uid_ems='{{ new_vm_uuid0 }}'"
  - set_fact: find_vm_url1="http://192.168.1.101/api/vms?expand=resources&attributes=href,name,uid_ems&filter[]=uid_ems='{{ new_vm_uuid1 }}'"
  - set_fact: find_vm_url2="http://192.168.1.101/api/vms?expand=resources&attributes=href,name,uid_ems&filter[]=uid_ems='{{ new_vm_uuid2 }}'"
  - set_fact: find_vm_url3="http://192.168.1.101/api/vms?expand=resources&attributes=href,name,uid_ems&filter[]=uid_ems='{{ new_vm_uuid3 }}'"

# - debug: var=find_vm_url1
 
  - name: Call to CloudForms to find href for new_vm_uuid
    uri:
      url: "{{ item }}"
      method: GET
      validate_certs: no
      user: admin
      password: "{{ cf_password }}"
      headers:
        Content-Type: "application/json"
      body_format: json
      return_content: yes
    register: token_output
    with_items:
      - "{{ find_vm_url0 }}"
      - "{{ find_vm_url1 }}"
      - "{{ find_vm_url2 }}"
      - "{{ find_vm_url3 }}"

  - debug: var=token_output.results[0]

  - name: Set ownership for visible instances
    uri:
      url: "{{ item.json.resources[0].href }}"
      method: POST
      return_content: yes
      user: admin
      password: "{{ cf_password }}"
      validate_certs: no
      body_format: json
      headers:
        Content-Type: "application/json"
      body:
        action: set_ownership
        resource:
          owner:
            userid: student{{ sid }}
          group:
            description: "Student-{{ sid }}-group"
    with_items: "{{ token_output.results }}"
    when: item.json.resources[0].name | regex_search('visible')

  - set_fact: cf_vm_href0="{{ token_output.results[0].json.resources[0].href }}"
  - set_fact: cf_vm_href1="{{ token_output.results[1].json.resources[0].href }}"
  - set_fact: cf_vm_href2="{{ token_output.results[2].json.resources[0].href }}"
  - set_fact: cf_vm_href3="{{ token_output.results[3].json.resources[0].href }}"

#  - debug: var=cf_vm_href0
  - name: Register vm with the service
    uri:
      url: "{{ svc_url }}"
      method: POST
      body_format: json
      body:
        action: add_resource
        resource : 
          resource:
            href: "{{ item }}"
      validate_certs: False
      user: admin
      password: "{{ cf_password }}"
      headers:
        Content-Type: "application/json"
      status_code: 200
    with_items:
      - "{{ cf_vm_href0 }}"  
      - "{{ cf_vm_href1 }}"  
      - "{{ cf_vm_href2 }}"  
      - "{{ cf_vm_href3 }}"  
