---
  - name: Set the Provider URL
    set_fact:
      provider_url: "https://192.168.1.101/api/providers/20000000000005"

  - name: Get services
    uri:
      url: "https://192.168.1.101/api/services"
      method: GET
      return_content: yes
      user: admin
      password: "{{ cf_password }}"
      validate_certs: no
      body_format: json
      headers:
        Content-Type: "application/json"
    register: service

  - name: set svc_url fact
    set_fact:
      svc_url: "{{ service.json.resources|last|json_query('href') }}"

  - name: Launch "{{ visibility }}" Windows instance
    os_server:
      cloud: devstack
      auth:
        project_name: student-{{ sid }}
      name: win-{{ visibility }}-{{ sid }}
      state: present
      key_name: "{{ key_name }}"
      availability_zone: "{{ az }}"
      nics:
        - net-name: student-{{ sid }}-{{ visiblity }}net
      image: "{{ win_image }}"
      flavor: "{{ win_flavor }}"
      security_groups: "{{ security_group }}"
      auto_ip: no
    register: new_vm

  - debug: var=new_vm.server.id

  - set_fact: new_vm_uuid="{{ new_vm.server.id }}"


  - name: Refresh provider in CloudForms
    uri:
      url: "{{ provider_url }}"
      method: POST
      body:
        action: refresh
      body_format: json
      user: admin
      password: "{{ cf_password }}"
      validate_certs: False
      headers:
        Content-Type: "application/json"
      status_code: 200
    register: output
  - debug: var=output
  - name: set the task href
    set_fact:
      task_url: "{{ output.json.task_href}}"
  - debug: var=task_url

  - name: Refresh provider in CloudForms
    uri:
      url: "{{ provider_url }}"
      method: POST
      body:
        action: refresh
      body_format: json
      user: admin
      password: "{{ cf_password }}"
      validate_certs: False
      headers:
        Content-Type: "application/json"
      status_code: 200
    register: output
  - debug: var=output
  - name: set the task href
    set_fact:
      task_url: "{{ output.json.task_href}}"
  - debug: var=task_url

  - name: Wait for the refresh to end
    uri:
      url: "{{ task_url }}"
      method: GET
      validate_certs: False
      user: admin
      password: "{{ cf_password }}"
      headers:
        Content-Type: "application/json"
      status_code: 200
    register: task_result
    until: task_result.json.state == 'Finished' or task_result.json.status == 'Error'
    failed_when: task_result.json.status == 'Error'
    retries: 5
    delay: 20
  - debug: var=task_result

  - set_fact: find_vm_url="http://192.168.1.101/api/vms?expand=resources&attributes=href,uid_ems&filter[]=uid_ems='{{ new_vm_uuid }}'"

  - debug: var=find_vm_url

  - name: Call to CloudForms to find href for new_vm_uuid
    uri:
      url: "{{ find_vm_url }}"
      method: GET
      validate_certs: no
      user: admin
      password: "{{ cf_password }}"
      headers:
        Content-Type: "application/json"
      body_format: json
      return_content: yes
    register: token_output

  - debug: var=token_output

  - set_fact: cf_vm_href="{{ token_output.json.resources[0].href }}"

  - debug: var=cf_vm_href

  - name: Create an array of vms
    set_fact:
      vms: "{{ vms|default([]) + [ { 'href': svc_url, 'resource':  { 'href': item } } ] }}"
    with_items:
      - "{{ cf_vm_href }}"

  - debug: var=vms

  - name: Register vm with the service
    uri:
      url: "https://192.168.1.101/api/services"
      method: POST
      body_format: json
      user: admin
      password: "{{ cf_password }}"
      body:
        action: add_resource
        resources : "{{ vms }}"
      validate_certs: False
      headers:
        Content-Type: "application/json"
      status_code: 200
    register: output

  - name: Register vm with the service
    uri:
      url: "https://192.168.1.101/api/services"
      method: POST
      body_format: json
      body:
        action: add_resource
        resources : "{{ vms }}"
      validate_certs: False
      user: admin
      password: "{{ cf_password }}"
      headers:
        Content-Type: "application/json"
      status_code: 200
    register: output

  - debug: var=output.json.results[0].success

